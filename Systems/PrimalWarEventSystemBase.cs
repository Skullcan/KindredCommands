using System;
using System.Collections.Generic;
using System.Linq;
using Il2CppInterop.Runtime;
using KindredCommands.Data;
using KindredCommands.Services;
using ProjectM;
using ProjectM.Network;
using ProjectM.Scripting;
using ProjectM.Shared.WarEvents;
using Stunlock.Core;
using Unity.Collections;
using Unity.Entities;
using Unity.Mathematics;
using Unity.Transforms;

namespace KindredCommands.Systems;
public class PrimalWarEventSystem : SystemBase
{
    public static PrimalWarEventSystem Instance { get; set; }
    ServerGameManager _serverGameManager;

    const int UNIT_LEVELS = 8;
    const int BOSS_LEVELS = 12;

	const float LOW_AMP = 1.1f;
	const float MID_AMP = 1.5f;
    const float HIGH_AMP = 2f;
    const float HEALTH_AMP = 3f;

    const float BUFF_CHANCE = 0.1f;
    const float STRIKE_CHANCE = 0.020f;

	static PrefabGUID _primalGate;
	static PrefabGUID _primalPortal;
	static PrefabGUID _lightningSmall;
	static PrefabGUID _lightningBig;
	static PrefabGUID _bloodRainBuff;
	static List<PrefabGUID> _randomBuffs;
	static ComponentType[] _eventComponents;
	static int _primalRiftFrequency;	

    double _nextRiftTime;
    double _riftInterval;

    static bool _isEdited;

    EntityQuery _gateQuery;
    EntityQuery _portalQuery;

    ComponentLookup<VBloodUnit> _vBloodLookup;
    ComponentLookup<Translation> _translationLookup;

    ComponentTypeHandle<WarEvent_ActiveGate> _gateHandle;
    ComponentTypeHandle<WarEvent_ActivePortal> _portalHandle;
    BufferTypeHandle<WarEvent_ActiveUnit> _unitBufferHandle;

    EntityTypeHandle _entityHandle;
    EntityStorageInfoLookup _entityStorageInfoLookup;

    NativeParallelHashSet<Entity> _handled;
    public override void OnCreate()
    {
		try
		{
			Instance = this;

			_primalGate = Prefabs.UC_WarEvent_Legion_Bosses_Primal;
			_primalPortal = Prefabs.UC_WarEvent_Legion_Smallwaves_Primal;

			_lightningSmall = Prefabs.AB_LightningStorm_Throw;
			_lightningBig = Prefabs.AB_LightningStorm_Throw_Big;
			_bloodRainBuff = Prefabs.AB_Dracula_Final_TravelToCenter_Normal_BloodRainBuff;

			_randomBuffs =
			[
				Prefabs.Shared_Affix_LevelAura_Buff,
				Prefabs.AB_CastleMan_HolyBeam_PowerBuff_01,
				Prefabs.AB_Chaos_PowerSurge_Buff,
				Prefabs.AB_CastleMan_HolyBeam_PowerBuff_Throw,
				Prefabs.AB_CastleMan_HolyBeam_Spinner_01,
				Prefabs.AB_ArchMage_FlameSphere_AreaEffectBuff,
				Prefabs.AB_ArchMage_LightningCurse_ProjectileSpawnerBuff,
				Prefabs.AB_Bandit_Deadeye_Camouflage_Buff,
				Prefabs.AB_Bandit_Deadeye_Chaosstorm_Channel_Buff,
				Prefabs.AB_Bandit_Foreman_BloodRage_Buff
			];

			_eventComponents =
			[
				ComponentType.ReadOnly(Il2CppType.Of<WarEvent_StartEvent>()),
				ComponentType.ReadOnly(Il2CppType.Of<FromCharacter>()),
				ComponentType.ReadOnly(Il2CppType.Of<NetworkEventType>())
			];

			_primalRiftFrequency = 12;

			_gateQuery = GetEntityQuery(new EntityQueryDesc
			{
				All = new[]
				{
				ComponentType.ReadOnly(Il2CppType.Of<WarEvent_ActiveGate>()),
				ComponentType.ReadOnly(Il2CppType.Of<WarEvent_ActiveUnit>())
			},
				Options = EntityQueryOptions.IncludeDisabled
			});

			_portalQuery = GetEntityQuery(new EntityQueryDesc
			{
				All = new[]
				{
				ComponentType.ReadOnly(Il2CppType.Of<WarEvent_ActivePortal>()),
				ComponentType.ReadOnly(Il2CppType.Of<WarEvent_ActiveUnit>())
			},
				Options = EntityQueryOptions.IncludeDisabled
			});

			_vBloodLookup = GetComponentLookup<VBloodUnit>(true);
			_translationLookup = GetComponentLookup<Translation>(true);

			_gateHandle = GetComponentTypeHandle<WarEvent_ActiveGate>(true);
			_portalHandle = GetComponentTypeHandle<WarEvent_ActivePortal>(true);
			_unitBufferHandle = GetBufferTypeHandle<WarEvent_ActiveUnit>(true);

			_entityHandle = GetEntityTypeHandle();
			_entityStorageInfoLookup = GetEntityStorageInfoLookup();

			_handled = new NativeParallelHashSet<Entity>(512, Allocator.Persistent);

			RequireForUpdate(_gateQuery);
			RequireForUpdate(_portalQuery);
			Enabled = true;
		}
		catch (Exception ex)
		{
			Plugin.LogInstance.LogError($"[PrimalWarEventSystem.OnCreate] Exception: {ex}");
		}
    }
    public override void OnStartRunning()
    {
		try
		{
			if (!_isEdited) _isEdited = TryModifyPrimalUnitCompositions(); // OnCreate too soon

			if (_primalRiftFrequency > 0)
			{
				_riftInterval = 86400.0 / _primalRiftFrequency;
				_nextRiftTime = Core.ServerTime + _riftInterval;
			}
		}
		catch (Exception ex)
		{
			Plugin.LogInstance.LogError($"[PrimalWarEventSystem.OnStartRunning] Exception: {ex}");
		}
    }
    bool TryModifyPrimalUnitCompositions()
    {
		try
		{
			_serverGameManager = Core.ServerGameManager;

			bool wavesModified = false;
			bool soulsModified = false;

			Entity primalWaves = _serverGameManager.GetPrefabEntity(Prefabs.UC_WarEvent_Legion_Smallwaves_Primal);
			Entity majorWaves = _serverGameManager.GetPrefabEntity(Prefabs.UC_WarEvent_Legion_Smallwaves_Major);

			Entity primalSouls = _serverGameManager.GetPrefabEntity(Prefabs.UC_WarEvent_Legion_Bosses_Primal);
			Entity majorSouls = _serverGameManager.GetPrefabEntity(Prefabs.UC_WarEvent_Legion_Bosses_Major);

			if (_serverGameManager.TryGetBuffer<UnitCompositionGroupEntry>(primalWaves, out var targetBuffer)
				&& _serverGameManager.TryGetBuffer<UnitCompositionGroupUnitEntry>(primalWaves, out var targetUnitBuffer)
				&& _serverGameManager.TryGetBuffer<UnitCompositionGroupEntry>(majorWaves, out var sourceBuffer)
				&& _serverGameManager.TryGetBuffer<UnitCompositionGroupUnitEntry>(majorWaves, out var sourceUnitBuffer))
			{
				targetBuffer.Clear();
				targetBuffer.CopyFrom(sourceBuffer);

				targetUnitBuffer.Clear();
				targetUnitBuffer.CopyFrom(sourceUnitBuffer);

				/*
				for (int i = 0; i < targetBuffer.Length; i++)
				{
					var group = targetBuffer[i];
					group.UnitsCount += 5;
					targetBuffer[i] = group;
				}
				*/

				wavesModified = true;
			}

			if (_serverGameManager.TryGetBuffer<UnitCompositionGroupEntry>(primalSouls, out targetBuffer)
				&& _serverGameManager.TryGetBuffer<UnitCompositionGroupUnitEntry>(primalSouls, out targetUnitBuffer)
				&& _serverGameManager.TryGetBuffer<UnitCompositionGroupEntry>(majorSouls, out sourceBuffer)
				&& _serverGameManager.TryGetBuffer<UnitCompositionGroupUnitEntry>(majorSouls, out sourceUnitBuffer))
			{
				targetBuffer.Clear();
				targetBuffer.CopyFrom(sourceBuffer);

				targetUnitBuffer.Clear();
				targetUnitBuffer.CopyFrom(sourceUnitBuffer);

				/*
				for (int i = 0; i < targetBuffer.Length; i++)
				{
					var group = targetBuffer[i];
					group.UnitsCount++;
					targetBuffer[i] = group;
				}
				*/

				soulsModified = true;
			}

			return wavesModified && soulsModified;
		}
		catch (Exception ex)
		{
			Plugin.LogInstance.LogError($"[PrimalWarEventSystem.TryModifyPrimalUnityCompositions] Exception: {ex}");
			return false;
		}
    }
    public override void OnDestroy()
    {
		try
		{
			if (_handled.IsCreated) _handled.Dispose();
			if (Instance == this) Instance = null;
		}
		catch (Exception ex)
		{
			Plugin.LogInstance.LogError($"[PrimalWarEventSystem.OnDestroy] Exception: {ex}");
		}
    }
    public override void OnUpdate()
    {
		try
		{
			_vBloodLookup.Update(this);
			_translationLookup.Update(this);

			_gateHandle.Update(this);
			_portalHandle.Update(this);
			_unitBufferHandle.Update(this);

			_entityHandle.Update(this);
			_entityStorageInfoLookup.Update(this);

			if (_primalRiftFrequency > 0 && Core.ServerTime >= _nextRiftTime)
			{
				StartPrimalWarEvent();
				_nextRiftTime = Core.ServerTime + _riftInterval;
			}

			SweepHandled();
			HandleActiveGates(_gateQuery);
			HandleActivePortals(_portalQuery);
		}
		catch (Exception ex)
		{
			Plugin.LogInstance.LogError($"[PrimalWarEventSystem.OnUpdate] Exception: {ex}");
		}
    }

    void HandleActiveGates(EntityQuery query)
    {
        var chunks = query.ToArchetypeChunkArray(Allocator.Temp);

        try
        {
            foreach (var chunk in chunks)
            {
                var gates = chunk.GetNativeArray(_gateHandle);
                var unitBuffers = chunk.GetBufferAccessor(_unitBufferHandle);

                for (int i = 0; i < chunk.Count; ++i)
                {
                    WarEvent_ActiveGate activeGate = gates[i];

                    if (!activeGate.UnitComposition.Equals(_primalGate)) continue;

                    var buffer = unitBuffers[i];
                    bool isActive = false;

                    foreach (var activeUnit in buffer)
                    {
                        Entity unitEntity = activeUnit.Instance;
                        bool isGateBoss = _vBloodLookup.HasComponent(unitEntity);

                        if (!_entityStorageInfoLookup.Exists(unitEntity)) continue;
                        else if (_handled.Contains(unitEntity))
                        {
                            isActive = true;
                            continue;
                        }

						//unitEntity.TryApplyBuffWithLifeTimeNone(_bloodRainBuff);
						Buffs.AddBuff(unitEntity, unitEntity, _bloodRainBuff);
						ModifyPrimalUnit(unitEntity, isGateBoss);

                        isActive = true;
                        _handled.Add(unitEntity);
                    }

                    if (!isActive) continue;

                    bool shouldStrike = UnityEngine.Random.value < STRIKE_CHANCE;
                    bool hasTranslation = _translationLookup.TryGetComponent(activeGate.Entity, out Translation translation);

                    if (shouldStrike
                        && hasTranslation)
                    {
                        SpawnLightningStrike(translation.Value);
                    }
                }
            }
        }
        catch (Exception e)
        {
            Core.Log.LogError($"[PrimalWarEventSystem.HandleActiveGates] Exception: {e}");
        }
        finally
        {
            chunks.Dispose();
        }
    }
    void HandleActivePortals(EntityQuery query)
    {
        var chunks = query.ToArchetypeChunkArray(Allocator.Temp);

        try
        {
            foreach (var chunk in chunks)
            {
                var portals = chunk.GetNativeArray(_portalHandle);
                var unitBuffers = chunk.GetBufferAccessor(_unitBufferHandle);

                for (int i = 0; i < chunk.Count; ++i)
                {
                    WarEvent_ActivePortal activePortal = portals[i];

                    if (!activePortal.UnitComposition.Equals(_primalPortal))
                        continue;

                    // activePortal.MinNormalUnits = 15;
                    // activePortal.ThrashPerNormal = 5;
                    // didn't seem to do anything?

                    var buffer = unitBuffers[i];

                    foreach (var activeUnit in buffer)
                    {
                        Entity unitEntity = activeUnit.Instance;

                        if (!_entityStorageInfoLookup.Exists(unitEntity)) continue;
                        else if (_handled.Contains(unitEntity)) continue;

                        if (Helper.RollForChance(BUFF_CHANCE))
                        {
							//Core.RunDelayed(() => unitEntity.TryApplyBuffWithLifeTimeNone(_randomBuffs.DrawRandom()));
							Core.RunDelayed(() => Buffs.AddBuff(unitEntity, unitEntity, _randomBuffs.DrawRandom()));
						}

                        ModifyPrimalUnit(unitEntity);

                        _handled.Add(unitEntity);
                    }
                }
            }
        }
        catch (Exception e)
        {
            Plugin.LogInstance.LogError($"[PrimalWarEventSystem.HandleActivePortals] Exception: {e}");
        }
        finally
        {
            chunks.Dispose();
        }
    }

    /*
    public static void AddUnitToCompEnd(PrefabGUID prefabGuid)
    {
        var unitBuffer = entityManager.GetBuffer<UnitCompositionGroupUnitEntry>(ucEntity);
        var groupBuffer = entityManager.GetBuffer<UnitCompositionGroupEntry>(ucEntity);

        unitBuffer.Add(new UnitCompositionGroupUnitEntry
        {
            Unit = unitGuid,
            IsVBloodUnit = false,
            CustomVBloodUnit = default,
            // UnitBaseStatsType = UnitBaseStatsType.Normal
        });

        var last = groupBuffer.Length--;
        var entry = groupBuffer[last];

        entry.UnitsCount++;
        groupBuffer[last] = entry;
    }
    */
    void SweepHandled()
    {
		var units = _handled.ToNativeArray(Allocator.Temp);
		try
		{
			foreach (var unit in units)
			{
				if (!_entityStorageInfoLookup.Exists(unit))
				{
					_handled.Remove(unit);
				}
			}			
		}
		catch (Exception ex)
		{
			Plugin.LogInstance.LogError($"[PrimalWarEventSystem.SweepHandled] Exception: {ex}");
		}
		finally
		{
			units.Dispose();
		}
    }

    const float GATE_HEIGHT = 4f;
    const float RADIUS = 10f;
    void SpawnLightningStrike(float3 center)
    {
		try
		{
			bool toss = UnityEngine.Random.value < 0.25f;
			PrefabGUID prefabGuid = toss ? _lightningBig : _lightningSmall;

			float3 position = center + new float3(
				UnityEngine.Random.Range(-RADIUS, RADIUS),
				-GATE_HEIGHT,
				UnityEngine.Random.Range(-RADIUS, RADIUS)
			);

			Entity lightningStrike = _serverGameManager.InstantiateEntityImmediate(Entity.Null, prefabGuid);
			lightningStrike.SetPosition(position);
		}
		catch (Exception ex)
		{
			Plugin.LogInstance.LogError($"[PrimalWarEventSystem.SpawnLightningStrike] Exception: {ex}");
		}		
    }
    static void ModifyPrimalUnit(Entity entity, bool isGateBoss = false)
    {
		try
		{
			SetLevel(entity, isGateBoss);
			SetAttackSpeed(entity, isGateBoss);
			SetHealth(entity, isGateBoss);
			SetPower(entity, isGateBoss);
			SetMoveSpeed(entity);
		}
		catch (Exception ex)
		{
			Plugin.LogInstance.LogError($"[PrimalWarEventSystem.ModifyPrimalUnit] Exception: {ex}");
		}
    }
    static void SetLevel(Entity entity, bool isGateBoss)
    {

		try
		{
			int modifier = isGateBoss ? BOSS_LEVELS : UNIT_LEVELS;
			entity.With((ref UnitLevel unitLevel) => unitLevel.Level._Value += modifier);
		}
		catch (Exception ex)
		{
			Plugin.LogInstance.LogError($"[PrimalWarEventSystem.SetLevel] Exception: {ex}");
		}
    }
    static void SetAttackSpeed(Entity entity, bool isGateBoss)
    {
		// float modifier = isGateBoss ? HIGH_AMP : MID_AMP;
		try
		{
			entity.With((ref AbilityBar_Shared abilityBarShared) =>
			{
				abilityBarShared.AbilityAttackSpeed._Value *= HIGH_AMP;
				abilityBarShared.PrimaryAttackSpeed._Value *= HIGH_AMP;
			});
		}
		catch (Exception ex)
		{
			Plugin.LogInstance.LogError($"[PrimalWarEventSystem.SetAttackSpeed] Exception: {ex}");
		}        
    }
    static void SetHealth(Entity entity, bool isGateBoss)
    {
		// float modifier = isGateBoss ? HIGH_AMP : MID_AMP;

		try
		{
			entity.With((ref Health health) =>
			{
				health.MaxHealth._Value *= HEALTH_AMP;
				health.Value = health.MaxHealth._Value;
			});
		}
		catch (Exception ex)
		{
			Plugin.LogInstance.LogError($"[PrimalWarEventSystem.SetHealth] Exception: {ex}");
		}
        
    }
    static void SetPower(Entity entity, bool isGateBoss)
    {
		// float modifier = isGateBoss ? HIGH_AMP : MID_AMP;
		try
		{
			entity.With((ref UnitStats unitStats) =>
			{
				unitStats.PhysicalPower._Value *= HIGH_AMP;
				unitStats.SpellPower._Value *= HIGH_AMP;
				unitStats.FireResistance._Value = isGateBoss ? 1 : unitStats.FireResistance._Value;
			});

			if (isGateBoss)
			{
				entity.HasWith((ref ResistanceData resistanceData) =>
				{
					resistanceData.FireResistance_DamageReductionPerRating = 100f;
					resistanceData.FireResistance_RedcuedIgiteChancePerRating = 100f;
				});
			}
		}
		catch (Exception ex)
		{
			Plugin.LogInstance.LogError($"[PrimalWarEventSystem.SetPower] Exception: {ex}");
		}        
    }
    static void SetMoveSpeed(Entity entity)
    {
		try
		{
			entity.With((ref AiMoveSpeeds aiMoveSpeeds) =>
			{
				aiMoveSpeeds.Walk._Value *= LOW_AMP;
				aiMoveSpeeds.Run._Value *= LOW_AMP;
				aiMoveSpeeds.Circle._Value *= LOW_AMP;
			});
		}
		catch (Exception ex)
		{
			Plugin.LogInstance.LogError($"[PrimalWarEventSystem.SetMoveSpeed] Exception: {ex}");
			throw;
		}
    }

    public static void StartPrimalWarEvent()
    {
		try
		{
			var usersOnline = PlayerService.GetUsersOnline();
			if (!usersOnline.Any())
			{
				Core.Log.LogWarning("[PrimalWarEventSystem] No online players to start event.");
				return;
			}

			Entity player = usersOnline.First();
			var userEntity = player.GetUser().LocalCharacter.GetEntityOnServer();
			var charEntity = player.GetUser().LocalCharacter._Entity;

			if (userEntity.Equals(null) || !charEntity.Equals(null)) return;

			NetworkEventType networkEventType = new()
			{
				EventId = NetworkEvents.EventId_WarEvent_StartEvent,
				IsAdminEvent = true,
				IsDebugEvent = true
			};

			WarEvent_StartEvent warEvent = new()
			{
				EventType = WarEventType.Primal,
				EnableAllGates = true
			};

			FromCharacter fromCharacter = new()
			{
				Character = charEntity,
				User = userEntity
			};

			Entity entity = Core.EntityManager.CreateEntity(_eventComponents);
			entity.Write(warEvent);
			entity.Write(fromCharacter);
			entity.Write(networkEventType);
		}
		catch (Exception ex)
		{
			Plugin.LogInstance.LogError($"[PrimalWarEventSystem.StartPrimalWarEvent] Exception: {ex}");
			throw;
		}
    }
}
